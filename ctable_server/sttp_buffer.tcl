#
# $Id$
#

#
# sttp_buffer ... create or use a ctable from a ctable server
#

namespace eval ::sttp_buffer:: {

# tables(URL) contains the name of the buffer associated with the URL
variable tables

# auto(URL) contains the name of the autogenerated buffer for the URL
variable auto

# meta(definition) contains the name of the meta-table for a given definition
variable meta

# metatable sequence number for autogenerated tables
variable metasequence 0

#
# Create a table given the definition
#
proc metacreate {definition} {
    variable meta
    variable metaseqence

    if [info exists meta($definition)] {
	return $meta($definition)
    }

    set name c_meta$metasequence
    set package C_meta$metasequence
    incr metasequence

    CExtension $name 1.0 [list Ctable $name $definition]
    package require $package

    set meta($definition) $name
    return $name
}

#
# Create a buffer table using reflection. TBD
#
proc create {cttpUrl} {
    error "Not implemented"
}

#
# Destroy the autocreated ctable for cttpUrl if it exists
#
proc autodestroy {cttpUrl} {
    variable auto

    if [info exists auto($cttpUrl)] {
	$auto($cttpUrl) destroy
	unset auto($cttpUrl)
    }
}

#
# Attach a buffer table, creating it if necessary
#
proc attach {cttpUrl {ctable #auto}} {
    variable tables

    if {"$ctable" == "#auto"} {
	set ctable [create $cttpUrl]
    }
    if [info exists tables($cttpUrl)] {
	if {"$tables($cttpUrl)" != "$ctable"} {
	    autodestroy $cttpUrl
	} else {
	    # Done!
	    return $ctable
	}
    }

    set tables($cttpUrl) $ctable

    return $ctable
}

#
# Detach a buffer table, destroying it if necessary
#
proc detach {cttpUrl} {
    variable tables

    if {[info exists tables($cttpUrl)]} {
    	unset $tables($cttpUrl)
    	autodestroy $cttpUrl
    }
}

#
# Return the buffer table associated with the URL, or NULL
#
proc table {cttpUrl} {
    variable tables

    if {![info exists tables($cttpUrl)]} {
	return ""
    }
    return $tables($cttpUrl)
}

}

package provide sttp_buffer 1.0
