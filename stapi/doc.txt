==== sttp_server ====

::sttp::init ?options?

   Options:
     -dir work_directory
        Root of directory tree for the ctables
     -mode mode
        Octal mode for new directory
     -conn connection
        Pgsql connection (if not present, assumes DIO)
     -cache minutes
        How long to treat a cached tsv file as "good"

::sttp::init_ctable name table_list where_clause ?columns|column...?

   Initialize a cache ctable based on one or more SQL tables. If necessary,
   this builds a ctable based on the columns, and generates new SQL to read
   the table. If the ctable is already built, the version numbers match, and
   the parameters match, then it's not necessary to rebuild the table and
   init_ctable simply verifies that it's up to date.

     name - base name of ctable
     table_list - list of SQL tables to extract data from, if it's empty
               then use the name.
     where_clause - SQL "WHERE" clause to limit selection, or an empty string
     columns - list of column definitions. There must be at least two
               columns defined, the first is the ctable key, the rest are
               the fields of the ctable. If there is only one "column"
               argument, it's assumed to be a list of column arguments.

   Column entries are each a list of {field type expr ?name value?...}

     field - field name
     type - sql type
     expr - sql expression to derive value
     name value
        - ctable arguments for the field

   * Only the field name is absulutely required.

   If the type is missing or blank, it's assumed to be varchar.
   If the expression is missing or blank, it's assumed to be the same as
      the field name.

::sttp::from_table table_name keys ?-option value?

   Generate a column list for init_ctable by querying the SQL database
   for the table definition.

      keys - a list of columns that define the key for the table

   Keys can be empty, to allow you to combine from_table lists with an
      appropriate "WHERE" clause to use init_ctable to create a view
      that spans tables.

   Options:
     -with column
        Include column name in table. If any "-with" clauses are provided,
        only the named columns will be included
     -without column
        Exclude column name from table. You must not provide both "-with"
        and "-without" options.
     -index column
        Make this column indexable
     -column {name type ?sql? ?args}
        Add an explicit derived column
     -table name
        If specified, generate implicit column-name as "table.column"
     -prefix text
        If specified, prefix column names with "$prefix"

::sttp::open_cached name ?pattern? ?-opt val?...

   Open an initialised ctable, maintaining a local cache of the underlying
   SQL table in a .tsv file in the workdir.

   Options
     pattern
     -pat pattern
        Only read lines matching the pattern from the cache, if the cache is
        good. This is an optimization to avoid reading the entire table into
	memory when only a part of the table will be used. If the cache is old
	or missing, then the entire table will still be read into memory.
     -time cache_timeout
        Override the default cache timeout.
     -col name
        Name of column in the table that contains the last_changed time of
        each entry, if any. This is used as an optimization to only load
	modified lines when the schema supports that.
     -index field_name
        Name of a field to create an index on. Multiple -index are allowed.

::sttp::refresh_ctable ctable ?last_read? ?err?
 
   Update new rows from SQL for ctable 'ctable'.

   If last_read is non-zero use that rather than last modify time
   of the cache file.

   If err is provided, it will return success or failure of the SQL request
   and put the error in $err, otherwise it will generate a Tcl error for
   SQL errors.

   This uses the parameters set up in "open_cached", and if there is no
   column in the table that can be used to determine the last change time,
   then the whole table will be re-read.

::sttp::save_ctable ctable ?tsv_file?

  Save a ctable. If the tsv_file is provided, that's all it does. If not,
  it locates and locks the correct tsv file.

::sttp::remove_tsv_file table_name
::sttp::remove_tcl_file table_name

  Remove the cached tcl or tsv files, which will force the cache to be
  reread (if the tsv file is missing) or reconstructed using SQL queries (if
  the tcl file is missing).

::sttp::open_raw_ctable name

  Open an initialized ctable (as in open_cached) but don't fetch anything
  from SQL. This is used internally, and is also useful for setting up
  temporary tables, copies, etcetera...

==== sttp_client ====

::sttp::optimize_array array_name {indexed_col ...} {col type...}

  query optimizer
  input  - an array containing the arguments to a $ctable search
         - a list of indexed fields
         - a name-value pair set of field types
  output - a possibly optimised search in the array
         - true if optimization was possible and you can use search+

::sttp::connect uri ?-name value...?

  Connect to a ctable or other database with a ctable interface via a URI.

  Return an open ctable.

  Options:

    -key  col

	Define the column used to generate the key. [compatible]

    -keys {col col ...}

 	Define the columns used to generate the key. [extension]

    -keysep "string"

	Define the separator used to build the key. [extension]

    If you provide these options, additional ctable methods are made
    available. These are documented below under "sttpx".

    The option "-key" or "-keys" with a single key produces a more
    compatible interface.

  Methods intially defined, and the packages they're defined in:

    package require sttp_client
    ctable://[host:port]/[dir/]table[/stuff][?stuff]

	 Use a ctable server via remote_ctable.

    package require sttp_client_pgtcl
    sql://connection/table[/col[:type]/col...][?param&param...]

	Create a ctable interface to a PostgreSQL table

	connection:
		Not implemented yet, will be something like:
			[user[:password]]@[host:]database

	cols:
		If no keys defined, first column is assumed to be the key.

	params:
		column=sql_code
			Define the SQL required to perform the selection
		_key=sql_code
			Define the SQL for the key
		_keys=column:column:...
			Define the key in terms of a list of columns.

	This uses the methods defined in sttp_server.

	The "search" method implements the extensions described in in the
	last part of this file.

    package require sttp_client
    ctable (no method)

	If the URI is not URI format, it assumes it's an object that provides
	the same semantics as a ctable... typically either a ctable, an
	already-opened ctable_client connection, or the result of a previous
	call to ::sttp::connect. If necessary it creates a wrapper around the
	ctable to implement the extra methods that STTP provides.

	Required methods to avoid the creation of a wrapper:

	    key
	    makekey
	    perform

  With CableAware:

    package require sc_ca_cttp_client
    cache://[host:host:host...]/table

	Look up ctable in CableAware's ctable registry, preferring hosts
	listed.

::sttp::register method transport_handler

  register a transport method for ::sttp::connect

== STTPX - the STTP API extensions to CTABLES

These are required for display, but may not be required by other users of the
package, so the wrapper object is only created when needed.

::sttpx::connect object key-list ?-keysep string?

  This is also called by ::sttp::connect if the "-key" or "-keys" option
  is provided.

  If the _object_ was created by ::sttpx::connect, then it is returned
  immediately. This can not be used to change the keysep or keys of an
  existing ctable.

  Otherwise, this behaves identically to calling ::sttp::connect with the
  -key/-keys argument, and creates a wrapper object that understands the
  additional methods:

    $ctable makekey array_name

      Returns the string that corresponds to the key for the $ctable, based on
      the contents of the existing strings in the ctable.

    $ctable store list|name val name val ...

      Store list in the ctable

      Comparable to:

        $ctable set [$ctable makekey $list] $list

    $ctable perform array ?-name value?...
    ::sttpx::perform array ?-name value?...

      Perform a canned search, comparable to

        eval $ctable search [array get array] ?-name value?...

      Or

        eval $ctable search+ [array get array] ?-name value?...

      The ?-name value? arguments override any values in the array.

      In the second form, the ctable is expected to be in a "-handle"
      argument, either in the array or the additional arguments.

      The search is extended as described below.

  In addition, the following methods are modified:

    $ctable search ?-name value?

      -compare list

        The list is passed through an optimizer that rearranges the
	comparisons for more efficiency.

	Also, the additional comparisons are recognised:

	  <> is a synonym for !=

	  imatch is a synonym for match
	  xmatch is a synonym for match_case

	  umatch field string

	    Equivalent to match_case field [toupper string]

	  lmatch field string

	    Equivalent to match_case field [tolower string]

	These extensions are used by STTPDisplay to allow fast indexed
	ctable searches ignoring case when the underlying ctable is known
	to have a field that is always upper or lower case, in a way that
	hides the differences between ctables and SQL tables.

