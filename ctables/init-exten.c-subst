/*
 * CTables
 *
 * define the following variables and subst this to define a the C *_Init
 * routines that the code that loads a C extension expects to find.
 *
 *  extension - the name of the extension
 *  extensionVersion - the version number, like 1.0
 *
 * $Id$
 *
 */

EXTERN int
${extension}_Init(Tcl_Interp *interp);

static int
cExtensionObjCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
{    int      optIndex;
 
 
    static CONST char *options[] = {
        "definition", "builder_version", (char *)NULL
    };
 
    enum options
    {
        OPT_DEFINITION, OPT_VERSION
    };

    if (objc != 2) {
        Tcl_WrongNumArgs (interp, 1, objv, "option");
	return TCL_ERROR;
    }

    if (Tcl_GetIndexFromObj  (interp, objv[1], options, "option", TCL_EXACT, &optIndex) == TCL_ERROR) {
        return TCL_ERROR;
    }

    switch ((enum options) optIndex) {
	case OPT_DEFINITION: {
	    Tcl_SetStringObj (Tcl_GetObjResult (interp), sourceCode, -1);
	    break;
	}

	case OPT_VERSION: {
	    Tcl_SetStringObj (Tcl_GetObjResult (interp), ctablePackageVersion, -1);
	    break;
	}
    }

    return TCL_OK;
}


/*
 *----------------------------------------------------------------------
 *
 * ${extension}_SafeInit --
 *
 *	Initialize the ${extension} in a safe interpreter.
 *
 * Results:
 *	A standard Tcl result
 *
 * Side effects:
 *	Very little
 *
 *----------------------------------------------------------------------
 */

EXTERN int
${extension}_SafeInit(Tcl_Interp *interp)
{
    return ${extension}_Init (interp);
}


/*
 *----------------------------------------------------------------------
 *
 * ${extension}_Init --
 *
 *	Initialize the ${extension} extension.  The string "${extension}" 
 *      in the function name must match the PACKAGE declaration at the top of
 *	configure.in.
 *
 * Results:
 *	A standard Tcl result
 *
 * Side effects:
 *	The ${extension} package is created.
 *
 *      New commands for the meta tables are added to the Tcl interpreter.
 *
 *----------------------------------------------------------------------
 */

EXTERN int
${extension}_Init(Tcl_Interp *interp)
{
    ctable_CreatorTable       *t;
    Tcl_HashTable             *hashTablePtr;
    int                        i;

    /*
     * This may work with 8.0, but we are using strictly stubs here,
     * which requires 8.1.
     */
    if (Tcl_InitStubs(interp, "8.1", 0) == NULL) {
	return TCL_ERROR;
    }

#ifdef TCL_MEM_DEBUG
    /* Init memory if needed */
    Tcl_InitMemory(interp);
#endif

    if (Tcl_PkgRequire(interp, "Tcl", "8.1", 0) == NULL) {
	return TCL_ERROR;
    }

    if (Tcl_PkgProvide(interp, "${extension}", "${extensionVersion}") != TCL_OK) {
	return TCL_ERROR;
    }

    Tcl_CreateObjCommand (interp, "${extension}", (Tcl_ObjCmdProc *)cExtensionObjCmd, (ClientData)NULL, (Tcl_CmdDeleteProc *)NULL);

