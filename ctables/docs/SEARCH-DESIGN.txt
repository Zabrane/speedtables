
$Id$

modifications for searching:

This is going to be search with an optional sort on the search results.

Building on ideas from the sort implementation, we'll allocate an array of
pointers equal to the number of elements in the ctable.

We'll run our query, which will be a logical AND of comparisons against
multiple fields.

We'll also have, like trackstream, a countOnly option, and an optional offset
and limit.

We'll be able to sort the final table if we want to.

Generate a search comparison routine for each field into the source that
ctable puts out. 

The routines will take a pointer to a hashtable entries and an array of
comparison structures identifying the field to be compared, the type
of comparison, and the value to compare it to.

We'll then execute a callout on every match.

when search is called:

malloc an array of pointers to hashtable entries the size of the table, if
sorting is required.

walk the hashtable and fill the array of pointers.

invoke qsort 

iteratively callout to a specified function with each key as the argument,
in turn.

If sorting is not required, do not allocate the result, just process each
matching row according to how search was invoked.

API:

$ctable search ?-sort {field1 {field2 desc}}? ?-glob pattern? ?-regexp pattern? ?-countOnly 0|1? ?-offset offset? ?-limit limit? ?-lt field value? ?-le field value? ?-eq field value? ?-ge field value? ?-gt field value? ?-false value? ?-true value?  ?-null field? -code ?codeBody?

If sort isn't specified, would be nice to bypass using the array of pointers.

-comparisons [list [list < field value] [list ne field value lt field valut

that looks painful

but i don't like the syntax of having the -eq all spread out in the search parameters and it makes it harder than with a list because with a list i can know how many elements there are for me to allocate.

i think the list thing gives us more control and flexibility for the future.  I already am thinking about multiple sets of search terms.



$ctable search ?-sort {field1 {field2 desc}}? ?-fields fieldList? ?-glob pattern? ?-regexp pattern? ?-compare list? ?-countOnly 0|1? ?-offset offset? ?-limit limit? ?-code codeBody? ?-write_tabsep channel?
