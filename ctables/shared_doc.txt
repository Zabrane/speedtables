New ctable commands:

	$ctable key    
		needed for STAPI, returns the column that is the
		primary key (usually _key)

	$ctable makekey list
		needed for STAPI, given a list of name-value pairs,
		returns the key that matches the list.

	$ctable methods
		needed for STAPI and other extensions, returns a
		list of implemented methods.

	$ctable attach pid
		Only valid for a master shared ctable, Creates a
		cycle entry for the process pid, and returns a list
		of parameters that describe how to attach to the
		ctable. Currently {file $file name $name}, where
		"file" is the file to map and "name" is the name
		of the shared ctable in the directory.

	$ctable getprop
		With no names, returns a name-value list of properties
		of the ctable, whatever is needed for reflection.
		Currently type, extension, and key. These are needed
		for the STAPI glue for shared tables.

	$ctable getprop name ...
		With names, returns a list of only those properties.

	$ctable share
		Returns the name of the shared memory segment the
		ctable is in, for passint to the share command (see
		below)

	$ctable share command ?options?
		Calls the share command with the ctable's share and
		options.

	$ctable create name master list
		Creates a new master table based on the parameters
		in the list.
			name tablename (optional)
				The shared memory segment has a
				small write-once symbol table that
				is used to locate individual ctables
				and other objects in shared mem.
			file filename (required)
				Multiple tables can be mapped in
				the same file, distinguished by the
				ctable name or the name provided
				in the "name" option.
			size bytes (required)
				Used to create the file, or if it's
				already mapped it checks if it's
				at least this big.
			flags list
				The only shared memory flags
				implemented are sync/nosync (default
				nosync) and core/nocore (default
				core).

	$ctable create name reader list
		Attaches to an existing shared memory segment based
		on the information in the list, then searches for
		your process ID. If it doesn't find the pid, it
		returns an error, then creates a reader-mode ctable
		that's basically a bunch of pointers into the shared
		memory segment's master ctable.

	share command [$ctable share] ?options?
	$ctable share command ?options?
		These are equivalent ways of doing the same thing.
		The "share" extension actually stands apart from
		the ctable extension, and doesn't even require Tcl,
		but it's designed for ctable use... it was easier
		to prototype and debug standalone. It's unlikely
		to be useful to use the explicit share form except
		in internal debugging. The rest of the doc assumes
		you're using "$ctable share command".

		The following commands are meaningful for ctable
		shares:

		names
			Returns a list of named objects (not
			necessarily ctables) in the share.

		set name string (master only)
			Sets a shared string variable, for passing
			additional environment or context to readers.

		get name
			Gets the value of the name if and only if it's
			a string set with "set".

		info
			Returns some internal information about the
			share in a name-value list. The data includes
			size, flags, sharename, whether you're trhe
			creator (master), and filename.

		pools
			Returns a list of {element_size elements_per_chunk
			chunks free_elements} for each pool, including
			the garbage pool (which has a virtual size
			of zero). For a ctable, there will always
			be a pool that's the size of a ctable row.

		pool element_size elements_per_chunk max_chunks
			Creates a pool for objects of element_size
			bytes, allocated in elements_per_chunk
			chunks, up to a maximum of max_chunks. If
			max_chunks is zero it will extend to pool
			to the limit of the shared segment if
			necessary.

