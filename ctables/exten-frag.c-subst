    /*
     * CTable code fragment to do metatable allocation that goes inside the
     * package *_Init code.
     *
     * $Id$
     *
     * Create the master table that has the registered proc table and stuff.
     *
     *  define the following variables and subst this:
     *   table
     */

    t = (struct ctableCreatorTable *)ckalloc (sizeof (struct ctableCreatorTable));

    /* create the table for registering Tcl commands to appear as methods
     * of the table class and pass it in through Tcl's client data
     * mechanism
     */
    hashTablePtr = (Tcl_HashTable *)ckalloc (sizeof (Tcl_HashTable));
    Tcl_InitCustomHashTable (hashTablePtr, TCL_STRING_KEYS, NULL);

    t->registeredProcTablePtr = hashTablePtr;
    t->nextAutoCounter = 0;
    t->fieldNames = ${table}_fields;
    t->nameObjList = ${table}_NameObjList;

    t->search_compare = ${table}_search_compare;
    t->sort_compare = ${table}_sort_compare;
    t->get_field_obj = ${table}_get;
    t->gen_list = ${table}_genlist;
    t->gen_keyvalue_list = ${table}_gen_keyvalue_list;
    t->dstring_append_get_tabsep = ${table}_dstring_append_get_tabsep;
    t->nFields = $NFIELDS;
    t->fieldTypes = ${table}_types;
    t->fieldsThatNeedQuoting = ${table}_needs_quoting;
    t->lappend_field = ${table}_lappend_field;
    t->lappend_field_and_name = ${table}_lappend_field_and_name;
    t->lappend_nonnull_field_and_name = ${table}_lappend_nonnull_field_and_name;

    // make a field list -- sure it's a little hokey but it works with
    // other places that take a number of fields and list of fields
    // and with this you can always get all of them
    t->fieldList = (int *)ckalloc (t->nFields * sizeof (int));
    for (i = 0; i < t->nFields; i++) {
	t->fieldList[i] = i;
    }

    ${table}_setup ();

    /* Create the ${table}MetaObjCmd command -- it's fairly equivalent to an
     * Itcl class in that it can create its own commands with their
     * own data spaces, etc.
     */
    Tcl_CreateObjCommand(interp, "${table}", (Tcl_ObjCmdProc *) ${table}MetaObjCmd, (ClientData)t, (Tcl_CmdDeleteProc *)NULL);

