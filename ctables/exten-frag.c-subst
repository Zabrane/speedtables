    /*
     * CTable code fragment to do metatable allocation that goes inside the
     * package *_Init code.
     *
     * $Id$
     *
     * Create the master table that has the registered proc table and stuff.
     *
     *  define the following variables and subst this:
     *   rowStructHeadTable
     *   rowStruct
     *   tableCommand - the name of the C command that creates this table
     *   commandName - the name the command will have from Tcl
     */
    ${rowStructHeadTable}Ptr = (struct $rowStructHeadTable *)ckalloc (sizeof (struct $rowStructHeadTable));

    /* create the table for registering Tcl commands to appear as methods
     * of the table class and pass it in through Tcl's client data
     * mechanism
     */
    hashTablePtr = (Tcl_HashTable *)ckalloc (sizeof (Tcl_HashTable));
    Tcl_InitCustomHashTable (hashTablePtr, TCL_STRING_KEYS, NULL);
    ${rowStructHeadTable}Ptr->registeredProcTablePtr = hashTablePtr;

    ${rowStructHeadTable}Ptr->rowStructList = (struct $rowStruct *)NULL;

    /* Create the CTrackStream command -- it's fairly equivalent to an
     * Itcl class in that it can create its own commands with their
     * own data spaces, etc.
     */
    Tcl_CreateObjCommand(interp, "$commandName", (Tcl_ObjCmdProc *) $tableCommand, (ClientData)${rowStructHeadTable}Ptr, (Tcl_CmdDeleteProc *)NULL);


